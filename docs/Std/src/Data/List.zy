use Std/ Arith/ (Int, sub, int_eq) end
use Std/ Bool/ if~ end
use Std/ Option end
use Builtin/ (VType, Thunk, Ret, F) end


pub data List (A : VType) where
  | +Nil()
  | +Cons(A, List A)
end

pub def rec foldl : forall (A : VType) (R : VType) . List A -> Thunk(A -> R -> Ret R) -> R -> Ret R =
  fn A R l step s ->
    match l
    | +Nil() -> ret s
    | +Cons(x, xs) ->
      do s' <- ! step x s;
      ! foldl @(A) @(R) xs step s'
    end
end
    
def rec fn get_rec (A : VType) (xs : List A) (index : Int) : F(Option A) =
  match xs
  | +Nil() -> ret +None()
  | +Cons(hd, tl) ->
    do minus1 <- ! sub index 1;
    ! if~ @(F(Option A)) {! int_eq 0 index} {ret +Some(hd)} {
      ! get_rec @(A) tl minus1
    }
  end
end

pub def fn get_element (A : VType) (xs : List A) (index : Int) : F(Option A) =
  ! get_rec @(A) xs index
end