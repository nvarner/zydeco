use String/ (String, str_append, int_to_str) end
use Data/ List/ List end
use Arith/ Int end
use Builtin/ Thunk end


pub extern codata OS end
pub extern def write_str : Thunk(String -> Thunk(OS) -> OS) end
pub extern def read_line : Thunk(Thunk(String -> OS) -> OS) end
pub extern def read_till_eof : Thunk(Thunk(String -> OS) -> OS) end
pub extern def arg_list : Thunk(Thunk(List String -> OS) -> OS) end
pub extern def exit : Thunk(Int -> OS) end

pub def write_line : Thunk(String -> Thunk(OS) -> OS) = {
  fn (s: String) (k: Thunk(OS)) ->
    do s <- ! str_append s "\n";
    ! write_str s k
} end

pub def write_int : Thunk(Int -> Thunk(OS) -> OS) = {
  fn (i: Int) (k: Thunk(OS)) ->
    do s <- ! int_to_str i;
    ! write_str s k
} end

pub def write_int_line : Thunk(Int -> Thunk(OS) -> OS) = {
  fn (i: Int) (k: Thunk(OS)) ->
    do s <- ! int_to_str i;
    ! write_line s k
} end

pub def panic : Thunk(String -> OS) = {
  fn (msg: String) ->
    do msg <- ! str_append "Program panicked with message: " msg;
    ! write_line msg { ! exit 1 }
} end