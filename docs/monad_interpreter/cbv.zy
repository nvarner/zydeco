codata Monad (M: VType -> CType) where
  | .return (A: VType) (a: A) : M A
  | .bind (A: VType) (A': VType) (m: U (M A)) (f: U (A -> M A')) : M A'
end

// def mret : Monad Ret =
//   comatch
//   | .return A a -> ret a
//   | .bind A A' m f ->
//     do x <- ! m;
//     ! f x
//   end
// end

data Exception where
  | +TyprError()
  | +FreeVariable()
end

alias MExn (A: VType) = Ret (Either Exception A) end

def fn mexn : Monad MExn =
  comatch
  | .return A a -> ret +Right(a)
  | .bind A A' m f ->
    do x <- ! m;
    match x
    | +Left(e) -> ret +Left(e)
    | +Right(v) -> ! f v
    end
  end
end

module Env where
  data T where
    | +Empty()
    | +Extend(String, Value, T)
  end

  codata O where
    | .lookup (x: String) : Option Value
    | .extend (x: String) (v: Value) : O
  end

  def rec fn o (env: Env) : O =
    comatch
    | .lookup x ->
      match env
      | +Empty() -> +None()
      | +Extend(x', v, env') ->
        do is-eq? <- ! str_eq x x';
        match is-eq?
        | +True() -> ret +Some(v)
        | +False() -> ! o env' .lookup x
        end
      end
    | .extend x v ->
      ! o +Extend(x, v, env)
    end
  end
end

data Value where
  | +Bool(Bool)
  | +Lam(U Env.T, String, Term)
end

data Term where
  | +Var(String)
  | +Lam(String, Term)
  | +App(Term, Term)
  | +Bool(Bool)
  | +If(Term, Term, Term)
end

codata Interp where
  | .run : MExn Value
end

def fn raise (exn: Exception) : Interp =
  comatch
  | .run -> ret +Left(exn)
  end
end

def rec fn interp (env: U Env.O) (t: Term) : Interp =
  comatch
  | .run ->
    match t
    | +Var(x) ->
      do x? <- ! env .lookup x;
      match x?
      | +None() -> ! raise +FreeVariable()
      | +Some(v) ->
        // ! mexn .return @(Value) v
        ret[mexn] v
      end
    | +Lam(x, t) -> ret[mexn] +Lam(env, x, t)
    | +App(t1, t2) ->
      // do m1 <- ! interp env t1 .run;
      // ! mexn .bind @(Value) @(Value) m1 { fn v1 -> ... }
      do[mexn] v1 <- ! interp env t1 .run;
      do[mexn] v2 <- ! interp env t2 .run;
      match v1
      | +Bool(b) -> ! raise +TypeError()
      | +Lam(env', x, t) ->
        ! interp { ! env' . extend x v2 } t .run
      end
    | +Bool(b) -> ret[mexn] +Bool(b)
    | +If(t1, t2, t3) ->
      do[mexn] v1 <- ! interp env t1 .run;
      match v1
      | +Bool(b) ->
        match b
        | +True() -> ! interp env t2 .run
        | +False() -> ! interp env t3 .run
        end
      | +Lam(env', x, t) -> ! raise +TypeError()
      end
    end
  end
end

main
  let term : Term = +App(+Lam("x", +Var("x")), +Bool(+True()));
  let env : U Env.O = { ! Env.o +Empty() };
  ! interp env term .run
end
