
// should be moved to stdlib...
pub def rec fn foldl (A : VType) (B : CType) (xs : U(LList A)) (b : U B) (f : U(A -> U B -> B)) : B =
  do xsv <- ! xs .run;
  match xsv
  | +Nil() -> ! b
  | +Cons(hd, tl) ->
    ! foldl @(A) @(B) tl {! f hd b} f
  end
end

pub def fn tail (A : VType) (xs : U(LList A)) : LList A =
  do xs' <- ! xs .run;
  match xs'
  | +Nil() -> ! nil @(A)
  | +Cons(x, tl) -> ! tl
  end
end 

pub def rec fn list_to_str (s : U(LList Char)) : F String =
  do s' <- ! s .run;
  match s'
  | +Nil() -> ret ""
  | +Cons(c, tl) ->
    do s <- ! list_to_str tl;
    do c <- ! char_to_str c;
    ! str_append c s
  end
end

// definition for parser
alias Parser (A : VType) = String -> (LList (Pair A String)) end

def fn result (A : VType) (v : A) : Parser A =
  fn (input : String) ->
    ! LList.singleton_list @(Pair A String) (+Cons(v, input))
end

def fn zero (A : VType) : Parser A =
  fn (input : String) ->
    ! LList.nil @(Pair A String)
end

def fn item : Parser Char =
  fn (input : String) ->
    ! if~ @(LList (Pair Char String)) {! str_eq "" input} {
      ! LList.nil @(Pair Char String)
    } {
      do x <- ! str_index input 0;
      do len <- ! str_length input;
      do xs <- ! str_slice input 1 len;
      ! LList.singleton_list @(Pair Char String) (+Cons(x, xs))
    }
end

def fn bind' (A : VType) (B : VType) (p : U(Parser A)) (f : U(A -> Parser B)) : Parser B =
  fn (input : String) ->
    let ps = {! p input} in
    ! LList.bind @(Pair A String) @(Pair B String) ps {fn (pa : Pair A String) ->
      match pa
      | +Cons(a, input) ->
        ! f a input
      end
     }
end

// dont know why it's always wrong
// def fn seq (A : VType) (B : VType) (p : U(Parser A)) (q : U(Parser B)) : Parser (Pair A B) =
//   ! bind' @(A) @(Pair A B) p {
//     fn x -> 
//       ! bind' @(B) @(Pair A B) q {
//         fn y -> 
//           ! result @(Pair A B) (+Cons(x, y))
//       }
//     }
// end

def fn sat (p : U(Char -> F Bool)) : Parser Char =
  ! bind' @(Char) @(Char) item {fn (x : Char) ->
    ! if~ @(Parser Char) {! p x} {
      ! result @(Char) x
    } {
      ! zero @(Char)
    }
  }
end

def fn char (x : Char) : Parser Char =
  ! sat {fn y -> ! char_eq x y}
end

def fn digit : Parser Char =
  ! sat {
    fn x ->
      do n <- ! char_to_int x;
      do b1 <- ! int_lt n 58;
      do b2 <- ! int_gt n 47;
      ! and b1 b2
  }
end

def fn lower : Parser Char =
  ! sat {
    fn x ->
      do n <- ! char_to_int x;
      do b1 <- ! int_lt n 123;
      do b2 <- ! int_gt n 96;
      ! and b1 b2
  }
end

def fn upper : Parser Char =
  ! sat {
    fn x ->
      do n <- ! char_to_int x;
      do b1 <- ! int_lt n 91;
      do b2 <- ! int_gt n 64;
      ! and b1 b2
  }
end

def fn plus (A : VType) (p : U(Parser A)) (q : U(Parser A)) : Parser A =
  fn (input : String) ->
    ! LList.append @(Pair A String) {! p input} {! q input}
end

def fn letter : Parser Char =
  ! plus @(Char) lower upper
end

def fn alphanum : Parser Char =
  ! plus @(Char) letter digit
end

def rec fn word : Parser String =
  ! plus @(String) { ! result @(String) ""} {
    ! bind' @(Char) @(String) {! letter} {
      fn x ->
        ! bind' @(String) @(String) {! word} {
          fn xs ->
            do x' <- ! char_to_str x;
            do xs' <- ! str_append x' xs;
            ! result @(String) xs'
        }
    }
  }
end

def rec fn string (s : String) : Parser String =
  ! if~ @(Parser String) {! str_eq "" s} {
    ! result @(String) ""
  } {
    do x <- ! str_index s 0;
    do len <- ! str_length s;
    do xs <- ! str_slice s 1 len;
    ! bind' @(Char) @(String) {! char x} {
      fn _ ->
      ! bind' @(String) @(String) {! string xs} {
        fn _ ->
        ! result @(String) s
      }
    }
  }
end

// redefined in laziness part
def rec fn many (A : VType) (p : U(Parser A)) : Parser (U(LList A)) =
  ! plus @(U(LList A)) { ! result @(U(LList A)) {! LList.nil @(A)}} {
    ! bind' @(A) @(U(LList A)) p {
      fn x ->
        ! bind' @(U(LList A)) @(U(LList A)) {! many @(A) p} {
          fn xs ->
            ! result @(U(LList A)) {! LList.cons @(A) x xs}
        }
    }
  }
end

def fn many1 (A : VType) (p : U(Parser A)) : Parser (U(LList A)) =
  ! bind' @(A) @(U(LList A)) p {
    fn x ->
      ! bind' @(U(LList A)) @(U(LList A)) {! many @(A) p} {
        fn xs ->
          ! result @(U(LList A)) {! LList.cons @(A) x xs}
      }
  }
end

def fn nat : Parser Int =
  ! bind' @(U(LList Char)) @(Int) {! many1 @(Char) digit} {
    fn xs ->
      do xs' <- ! list_to_str xs;
      do n <- ! str_to_int xs';
      ! result @(Int) n
  }
end

def fn int : Parser Int =
  let op = {
    ! plus @(U(Int -> F Int)) {
      ! bind' @(Char) @(U(Int -> F Int)) {! char '-'} {fn _ -> ! result @(U(Int -> F Int)) {fn x -> ! sub 0 x}}
    } {
      ! result @(U(Int -> F Int)) {fn x -> ret x}
    }
  }
  in
  ! bind' @(U(Int -> F Int)) @(Int) op {
    fn f ->
      ! bind' @(Int) @(Int) {! nat} {
        fn n ->
          do n' <- ! f n;
          ! result @(Int) n'
      }
  }
end

def fn ints1 : Parser (U(LList Int)) =
  ! bind' @(Char) @(U(LList Int)) {! char '['} {
    fn _ ->
      ! bind' @(Int) @(U(LList Int)) {! int} {
        fn n ->
          ! bind' @(U(LList Int)) @(U(LList Int)) {! many @(Int) {
            ! bind' @(Char) @(Int) {! char ','} {
              fn _ ->
                ! bind' @(Int) @(Int) {! int} {
                  fn n ->
                    ! result @(Int) n
                }
            }}} {
            fn ns ->
              ! bind' @(Char) @(U(LList Int)) {! char ']'} {
                fn _ ->
                  ! result @(U(LList Int)) {! LList.cons @(Int) n ns}
              }
          }
      }
  }
end

def fn sepby1 (A : VType) (S : VType) (p : U(Parser A)) (sep : U(Parser S)) : Parser (U(LList A)) =
  ! bind' @(A) @(U(LList A)) p {
    fn x ->
      ! bind' @(U(LList A)) @(U(LList A)) {! many @(A) {
        ! bind' @(S) @(A) sep {
          fn _ ->
            ! bind' @(A) @(A) p {
              fn y ->
                ! result @(A) y
            }
        }}} {
        fn xs ->
          ! result @(U(LList A)) {! LList.cons @(A) x xs}
      }
  }
end

def fn ints2 : Parser (U(LList Int)) =
  ! bind' @(Char) @(U(LList Int)) {! char '['} {
    fn _ ->
      ! bind' @(U(LList Int)) @(U(LList Int)) {! sepby1 @(Int) @(Char) {! int} {! char ','}} {
        fn ns ->
          ! bind' @(Char) @(U(LList Int)) {! char ']'} {
            fn _ ->
              ! result @(U(LList Int)) ns
          }
      }
  }
end

def fn bracket (M : VType) (A : VType) (N : VType) (open : U(Parser M)) (p : U(Parser A)) (close : U(Parser N)) : Parser A =
  ! bind' @(M) @(A) open {
    fn _ ->
      ! bind' @(A) @(A) p {
        fn x ->
          ! bind' @(N) @(A) close {
            fn _ ->
              ! result @(A) x
          }
      }
  }
end

def fn ints : Parser (U(LList Int)) =
  ! bracket @(Char) @(U(LList Int)) @(Char) {! char '['} {! sepby1 @(Int) @(Char) {! int} {! char ','}} {! char ']'}
end

def fn sepby (A : VType) (S : VType) (p : U(Parser A)) (sep : U(Parser S)) : Parser (U(LList A)) =
  ! plus @(U(LList A)) { ! result @(U(LList A)) {! LList.nil @(A)}} {
    ! sepby1 @(A) @(S) p sep
  }
end


def rec fn foldl' (A : VType) (R : VType) (g : U(A -> R -> F R)) (a : R) (xs : U(LList A)) : F R =
  ! LList.foldl @(A) @(F R) xs {ret a} {fn x acc -> do acc' <- ! acc;! g x acc'}
end

def rec fn chainl1 (A : VType) (p : U(Parser A)) (op : U(Parser (U(A -> A -> F A)))) : Parser A =
  ! bind' @(A) @(A) p {
    fn x ->
      ! bind' @(U(LList (Pair (U(A -> A -> F A)) A))) @(A) {
        ! many @(Pair (U(A -> A -> F A)) A) {
          ! bind' @(U(A -> A -> F A)) @(Pair (U(A -> A -> F A)) A) op {
            fn f ->
              ! bind' @(A) @(Pair (U(A -> A -> F A)) A) p {
                fn y ->
                  ! result @(Pair (U(A -> A -> F A)) A) +Cons(f, y)
              }
          }
        }
      } {
        fn fys ->
          do res <- ! foldl' @(Pair (U(A -> A -> F A)) A) @(A) {
            fn p acc ->
              match p
              | +Cons(f,y) ->
                ! f acc y
              end
          } x fys;
          ! result @(A) x
      }
  }
end

def rec fn chainr1 (A : VType) (p : U(Parser A)) (op : U(Parser (U (A -> A -> F A)))) : Parser A =
  ! bind' @(A) @(A) p {
    fn x ->
      ! plus @(A) {! result @(A) x} {! bind' @(U (A -> A -> F A)) @(A) op {
        fn f ->
          ! bind' @(A) @(A) {
            ! chainr1 @(A) p op
          } {
            fn y ->
              do res <- ! f x y;
              ! result @(A) res
          }
      }}
  }
end

// addition, subtraction, and parentheses

def fn addop : Parser (U(Int -> Int -> F Int)) =
  ! plus @(U(Int -> Int -> F Int)) {
    ! bind' @(Char) @(U(Int -> Int -> F Int)) {! char '+'} {fn _ -> ! result @(U(Int -> Int -> F Int)) add}
  } {
    ! bind' @(Char) @(U(Int -> Int -> F Int)) {! char '-'} {fn _ -> ! result @(U(Int -> Int -> F Int)) sub}
  }
end

// def rec fn foldr1 (A : VType) (B : CType) (g : U(A -> U B -> B)) (xs : U(LList A)) (b : U B) : B =
//   ! LList.foldr @(A) @(B) xs b g
// end

// def fn ops (A : VType) (R : VType) (xs : U(LList (Pair A R))) : Parser R =
//   ! foldr1 @(Pair A R) @(Parser R) {
    
//   } xs {! zero @(R)}
// end


// Can be moved to stdlib

def rec fn pow (x : Int) (y : Int) : F Int =
  ! if~ @(F Int) {! int_eq y 0} {
    ret 1
  } {
    do y' <- ! sub y 1;
    do res <- ! pow x y';
    ! mul x res
  }
end


def fn expop : Parser (U(Int -> Int -> F Int)) =
  ! bind' @(Char) @(U(Int -> Int -> F Int)) {! char '^'} {fn _ -> ! result @(U(Int -> Int -> F Int)) pow}
end

def rec fn expr_int : Parser Int =
  let factor = {
    ! plus @(Int) {! nat} {
      ! bracket @(Char) @(Int) @(Char) {! char '('} expr_int {! char ')'}
    }
  } in
  ! chainl1 @(Int) factor addop
end

def fn term : Parser Int =
  let factor = {
    ! plus @(Int) {! nat} {
      ! bracket @(Char) @(Int) @(Char) {! char '('} expr_int {! char ')'}
    }
  } in
  ! chainr1 @(Int) factor expop
end

def fn chainl (A : VType) (p : U(Parser A)) (op : U(Parser (U(A -> A -> F A)))) (v : A) : Parser A =
  ! plus @(A) {! result @(A) v} {! chainl1 @(A) p op}
end

def fn chainr (A : VType) (p : U(Parser A)) (op : U(Parser (U(A -> A -> F A)))) (v : A) : Parser A =
  ! plus @(A) {! result @(A) v} {! chainr1 @(A) p op}
end

// two kinds of evaluations: improving efficiency
// inefficient
def fn eval' : Parser Int =
  let add' = {
    ! bind' @(Int) @(Int) {! nat} {
      fn x ->
        ! bind' @(Char) @(Int) {! char '+'} {
          fn _ ->
            ! bind' @(Int) @(Int) {! nat} {
              fn y ->
                do res <- ! add x y;
                ! result @(Int) res
            }
        }
    }
  } in
  let sub' = {
    ! bind' @(Int) @(Int) {! nat} {
      fn x ->
        ! bind' @(Char) @(Int) {! char '-'} {
          fn _ ->
            ! bind' @(Int) @(Int) {! nat} {
              fn y ->
                do res <- ! sub x y;
                ! result @(Int) res
            }
        }
    }
  } in
  ! plus @(Int) add' sub'
end

// efficient: left and right factorization
def fn eval : Parser Int =
  ! bind' @(Int) @(Int) {! nat} {
    fn x ->
      ! bind' @(U(Int -> Int -> F Int)) @(Int) {! addop} {
        fn f ->
          ! bind' @(Int) @(Int) {! nat} {
            fn y ->
              do res <- ! f x y;
              ! result @(Int) res
          }
      }
  }
end

//improving laziness

def fn force (A : VType) (p : U(Parser A)) : Parser A =
  fn (input : String) ->
    let x = {! p input} in
    do hd <- ! LList.head @(Pair A String) x;
    let tl = {! LList.tail @(Pair A String) x} in
    match hd
    | +None() -> ! LList.nil @(Pair A String)
    | +Some(p) ->
      match p
      | +Cons(a, input) ->
        ! LList.cons @(Pair A String) (+Cons(a, input)) tl
      end
    end
end

def rec fn many' (A : VType) (p : U(Parser A)) : Parser (U(LList A)) =
  ! force @(U(LList A)) {
    ! plus @(U(LList A)) {
      ! bind' @(A) @(U(LList A)) p {
        fn x ->
          ! bind' @(U(LList A)) @(U(LList A)) {
            ! many' @(A) p
          } {
            fn xs ->
              ! result @(U(LList A)) {! LList.cons @(A) x xs}
          }
      }
    } {
      ! result @(U(LList A)) {! LList.nil @(A)}
    }
  }
end

// Limiting the number of results

def fn number : Parser Int =
  ! plus @(Int) {! nat} {! result @(Int) 0}
end

// first p only returns the first result of p (if there is any)
def fn first (A : VType) (p : U(Parser A)) : Parser A =
  fn (input : String) ->
    do xs <- ! {! p input} .run;
    match xs
    | +Nil() -> ! LList.nil @(Pair A String)
    | +Cons(hd, tl) ->
      ! LList.singleton_list @(Pair A String) hd
    end
end

// deterministic choice, if p matches, q will never be applied
// improve efficiency
def fn dplus (A : VType) (p : U(Parser A)) (q : U(Parser A)) : Parser A =
  ! first @(A) {
    ! plus @(A) p q
  }
end

// lexical: White space, comments, and keywords
def fn space : Parser Unit =
  let is_space : U(Char -> F Bool) = {
    fn x ->
      do b1 <- ! char_eq x ' ';
      do b2 <- ! char_eq x '\n';
      do b3 <- ! char_eq x '\t';
      do b' <- ! or b2 b3;
      ! or b1 b'
  } in
  ! bind' @(U(LList Char)) @(Unit) {! many1 @(Char) {! sat is_space}} {fn _ -> ! result @(Unit) +Unit()}
end

def fn comment : Parser Unit =
  ! bind' @(String) @(Unit) {! string "--"} {
    fn _ ->
      ! bind' @(U(LList Char)) @(Unit) {! many @(Char) {! sat {fn x -> ! not~ {! char_eq '\n' x}}}} {
        fn _ ->
          ! result @(Unit) +Unit()
      }
  }
end

def fn junk : Parser Unit =
  ! bind' @(U(LList Unit)) @(Unit) {! many @(Unit) {! dplus @(Unit) {! space} {! comment}}} {
    fn _ ->
      ! result @(Unit) +Unit()
  }
end

// parse removes junk before applying a given parser
def fn parse (A : VType) (p : U(Parser A)) : Parser A =
  ! bind' @(Unit) @(A) {! junk} {
    fn _ ->
      ! bind' @(A) @(A) {! p} {
        fn v ->
          ! result @(A) v
      }
  }
end

// token applies a parser and then removes trailing junk
def fn token (A : VType) (p : U(Parser A)) : Parser A =
  ! bind' @(A) @(A) {! p} {
    fn v ->
      ! bind' @(Unit) @(A) {! junk} {
        fn _ ->
          ! result @(A) v
      }
  }
end

def fn natural : Parser Int =
  ! token @(Int) {! nat}
end

def fn integer : Parser Int =
  ! token @(Int) {! int}
end

def fn symbol (s : String) : Parser String =
  ! parse @(String) {! token @(String) {! string s}}
end

def fn ident : Parser String =
  // ! parse @(String) {! token @(String) {
    ! bind' @(Char) @(String) {! lower} {
      fn x ->
        ! bind' @(U(LList Char)) @(String) {! many' @(Char) alphanum} {
          fn xs ->
            do x' <- ! char_to_str x;
            do xs' <- ! list_to_str xs;
            do xs'' <- ! str_append x' xs';
            ! result @(String) xs''
        }
    }
  // }}
end

def fn identifier (xs : U(LList String)) : Parser String =
  ! token @(String) {
    ! bind' @(String) @(String) {! ident} {
      fn x ->
        ! if~ @(Parser String) {! LList.any @(String) {fn s -> ! str_eq x s} xs} {
          ! zero @(String)
        } {
          ! result @(String) x
        }
    }
  }
end

// A parser for simple lambda expressions

data Expr where
  | +App(Expr, Expr)
  | +Lam(String, Expr)
  | +Let(String, Expr, Expr)
  | +Var(String)
end

def fn keywords : LList String =
  let l1 = {! LList.singleton_list @(String) "let"} in
  ! LList.cons @(String) "in" l1
end

def fn variable : Parser String =
  ! identifier {! keywords}
end

def fn appop : Parser (U(Expr -> Expr -> F Expr)) =
  ! bind' @(Char) @(U(Expr -> Expr -> F Expr)) {! char '.'} {fn _ -> ! result @(U(Expr -> Expr -> F Expr)) {fn x y -> ret +App(x, y)}}
end

def rec fn expr : Parser Expr =
  let atom = {
    let lam = {
      ! bind' @(String) @(Expr) {! symbol "|"} {
        fn _ ->
          ! bind' @(String) @(Expr) {! variable} {
            fn x ->
              ! bind' @(String) @(Expr) {! symbol "->"} {
                fn _ ->
                  ! bind' @(Expr) @(Expr) {! expr} {
                    fn e ->
                      ! result @(Expr) +Lam(x, e)
                  }
              }
          }
      }
    } in
    let local = {
      ! bind' @(String) @(Expr) {! symbol "let"} {
        fn _ ->
          ! bind' @(String) @(Expr) {! variable} {
            fn x ->
              ! bind' @(String) @(Expr) {! symbol "="} {
                fn _ ->
                  ! bind' @(Expr) @(Expr) {! expr} {
                    fn e1 ->
                      ! bind' @(String) @(Expr) {! symbol " in"} {
                        fn _ ->
                          ! bind' @(Expr) @(Expr) {! expr} {
                            fn e2 ->
                              ! result @(Expr) +Let(x, e1, e2)
                          }
                      }
                  }
              }
          }
      }
    } in
    let var = {
      ! bind' @(String) @(Expr) {! variable} {
        fn x ->
          ! result @(Expr) +Var(x)
      }
    } in
    let paren = {
      ! bracket @(String) @(Expr) @(String) {! symbol "("} {! expr} {! symbol ")"}
    } in
    ! dplus @(Expr) lam {
      ! dplus @(Expr) local {
        ! dplus @(Expr) var paren
      }
    }
  } in
  ! chainl1 @(Expr) atom appop
end

// print the result
def rec fn print_parser_hd (A : VType) (fmt : U(A -> F String)) (res : U(LList (Pair A String))) (next : U OS) : OS =
  do hd <- ! LList.head @(Pair A String) res;
  match hd
  | +None() -> ! next
  | +Some(p) ->
    match p
    | +Cons(a, str) ->
      do str' <- ! fmt a;
      do bf <- ! str_append str' ",";
      do res <- ! str_append bf str;
      ! write_line res next
    end
  end
end

def rec fn print_parser_all (A : VType) (fmt : U(A -> F String)) (res : U(LList (Pair A String))) (next : U OS) : OS =
  do ll <- ! res .run;
  match ll
  | +Nil() -> ! next
  | +Cons(p, tl) ->
    match p
    | +Cons(a, str) ->
      do str' <- ! fmt a;
      do bf <- ! str_append str' ",";
      do res <- ! str_append bf str;
      ! write_line res {! print_parser_all @(A) fmt tl next}
    end
  end
end

def rec fn expr_fmt (e : Expr) : F String =
  match e 
  | +App(e1, e2) ->
    do e1' <- ! expr_fmt e1;
    do e2' <- ! expr_fmt e2;
    do res <- ! str_append e1' ", ";
    do res <- ! str_append res e2';
    do res <- ! str_append res ")";
    do res <- ! str_append "App(" res;
    ret res
  | +Lam(x, e) ->
    do e' <- ! expr_fmt e;
    do res <- ! str_append e' ")";
    do res <- ! str_append ", " res;
    do res <- ! str_append x res;
    do res <- ! str_append "Lam(" res;
    ret res
  | +Let(x, e1, e2) ->
    do e1' <- ! expr_fmt e1;
    do e2' <- ! expr_fmt e2;
    do res <- ! str_append e1' ", ";
    do res <- ! str_append res e2';
    do res <- ! str_append res ")";
    do res <- ! str_append ", " res;
    do res <- ! str_append x res;
    do res <- ! str_append "Let(" res;
    ret res
  | +Var(x) ->
    do res <- ! str_append x ")";
    do res <- ! str_append "Var(" res;
    ret res
  end
end

data Symbol where
| +Def(String)
end

def fn symbol_parser : Parser Symbol =
  ! bind' @(String) @(Symbol) {! symbol "def"} {
    fn _ ->
      ! bind' @(String) @(Symbol) {! variable} {
        fn x ->
          ! bind' @(String) @(Symbol) {! symbol "end"} {
            fn _ ->
            ! result @(Symbol) +Def(x)
      }
    }
  }
end

def fn symbol_fmt (s : Symbol) : F String =
  match s
  | +Def(x) ->
    do res <- ! str_append x ")";
    do res <- ! str_append "Def(" res;
    ret res
  end
end

data SynVal where
  | +Var(String) // variable
  | +True() // True()
  | +False() // False()
  | +ThunkV(SynComp) // { c }
end

data SynComp where
  | +If(SynVal, SynComp, SynComp) // if v then c1 else c2
  | +Force(SynVal) // ! v
  | +Lam(String, SynComp) // | x -> c
  | +App(SynComp, SynVal) // c v
  | +Return(SynVal) // ret v
  | +Bind(SynComp, String, SynComp) // do x <- c1; c2
end

def rec fn synComp : Parser SynComp =
    let rec value : Parser SynVal =
      let var = {
        ! bind' @(String) @(SynVal) {! variable} {
          fn x ->
            ! result @(SynVal) +Var(x)
        }
      } in
      let true_val = {
        ! bind' @(String) @(SynVal) {! symbol "True()"} {
          fn _ ->
            ! result @(SynVal) +True()
        }
      } in
      let false_val = {
        ! bind' @(String) @(SynVal) {! symbol "False()"} {
          fn _ ->
            ! result @(SynVal) +False()
        }
      } in
      let paren = {
        ! bracket @(String) @(SynVal) @(String) {! symbol "("} {! value} {! symbol ")"}
      } in
      let thunk = {
        ! bind' @(SynComp) @(SynVal) {
          ! bracket @(String) @(SynComp) @(String) {! symbol "{"} {! synComp} {! symbol "}"}
        } {
          fn c ->
            ! result @(SynVal) +ThunkV(c)
        }
      } in
      ! dplus @(SynVal) true_val {
        ! dplus @(SynVal) false_val {
          ! dplus @(SynVal) var {
            ! dplus @(SynVal) thunk paren
          }
        }
      }
    in
    let if = {
      ! bind' @(String) @(SynComp) {! symbol "if"} {
        fn _ ->
          ! bind' @(SynVal) @(SynComp) {! value} {
            fn v ->
              ! bind' @(String) @(SynComp) {! symbol " then"} {
                fn _ ->
                  ! bind' @(SynComp) @(SynComp) {! synComp} {
                    fn c1 ->
                      ! bind' @(String) @(SynComp) {! symbol " else"} {
                        fn _ ->
                          ! bind' @(SynComp) @(SynComp) {! synComp} {
                            fn c2 ->
                              ! result @(SynComp) +If(v, c1, c2)
                          }
                      }
                  }
              }
          }
      }
    } in
    let force = {
      ! bind' @(String) @(SynComp) {! symbol "!"} {
        fn _ ->
          ! bind' @(SynVal) @(SynComp) {! value} {
            fn v ->
              ! result @(SynComp) +Force(v)
          }
      }
    } in
    let lam = {
      ! bind' @(String) @(SynComp) {! symbol "|"} {
        fn _ ->
          ! bind' @(String) @(SynComp) {! variable} {
            fn x ->
              ! bind' @(String) @(SynComp) {! symbol "->"} {
                fn _ ->
                  ! bind' @(SynComp) @(SynComp) {! synComp} {
                    fn c ->
                      ! result @(SynComp) +Lam(x, c)
                  }
              }
          }
      }
    } in
    let return = {
      ! bind' @(String) @(SynComp) {! symbol "ret"} {
        fn _ ->
          ! bind' @(SynVal) @(SynComp) {! value} {
            fn v ->
              ! result @(SynComp) +Return(v)
          }
      }
    } in
    let bind_ = {
      ! bind' @(String) @(SynComp) {! symbol "do"} {
        fn _ ->
          ! bind' @(String) @(SynComp) {! variable} {
            fn x ->
              ! bind' @(String) @(SynComp) {! symbol "<-"} {
                fn _ ->
                  ! bind' @(SynComp) @(SynComp) {! synComp} {
                    fn c1 ->
                      ! bind' @(String) @(SynComp) {! symbol ";"} {
                        fn _ ->
                          ! bind' @(SynComp) @(SynComp) {! synComp} {
                            fn c2 ->
                              ! result @(SynComp) +Bind(c1, x, c2)
                          }
                      }
                  }
              }
          }
      }
    } in
    let paren = {
      ! bracket @(String) @(SynComp) @(String) {! symbol "("} {! synComp} {! symbol ")"}
    } in
    let appop_cbpv = {
      ! bind' @(String) @(SynComp) {! symbol "ap"} {
        fn _ ->
        ! bind' @(SynComp) @(SynComp) {! synComp} {
          fn c ->
          ! bind' @(String) @(SynComp) {! symbol "to"} {
           fn _ ->
            ! bind' @(SynVal) @(SynComp) {! value} {
              fn v ->
                ! result @(SynComp) +App(c, v)
            }
          }
        }
      }
    } in
    // ! dplus @(SynComp) appop_cbpv {
      ! dplus @(SynComp) if {
        ! dplus @(SynComp) force {
          ! dplus @(SynComp) lam {
            ! dplus @(SynComp) return {
              ! dplus @(SynComp) bind_ 
              // paren
              {! dplus @(SynComp) appop_cbpv paren}
            }
          }
        }
      }
    // }
end

def fn synVal_fmt (v : SynVal) : F String =
  match v
  | +Var(x) ->
    ret x // variable
  | +True() ->
    ret "True()" // True()
  | +False() ->
    ret "False()" // False()
  | +ThunkV(c) ->
    ret "Thunk" // { c }
  end
end

def rec fn synComp_fmt (c : SynComp) : F String =
  match c
  | +Return(v) ->
    do v' <- ! synVal_fmt v;
    ! str_append "ret " v'
  | +If(v, c1, c2) -> // if v then c1 else c2
    do v' <- ! synVal_fmt v;
    do c1' <- ! synComp_fmt c1;
    do c2' <- ! synComp_fmt c2;
    do s1 <- ! str_append "if2 " v';
    do s2 <- ! str_append " then2 " c1';
    do s3 <- ! str_append " else2 " c2';
    do s <- ! str_append s2 s3;
    ! str_append s1 s
  | +Force(v) ->
    do v' <- ! synVal_fmt v;
    ! str_append "! " v'
  | +Lam(x, c) ->
    do s2 <- ! synComp_fmt c;
    do s2 <- ! str_append " -> " s2;
    do s <- ! str_append x s2; // | x -> c
    ! str_append "| " s
  | +App(c, v) ->
    do c' <- ! synComp_fmt c;
    do v' <- ! synVal_fmt v;
    do s <- ! str_append "app " c';
    do s <- ! str_append s " to ";
    ! str_append s v'
  | +Bind(c1, x, c2) ->
    do s1 <- ! synComp_fmt c1;
    do s2 <- ! synComp_fmt c2;
    do s <- ! str_append "do " x;
    do s <- ! str_append s " <- ";
    do s <- ! str_append s s1;
    do s <- ! str_append s "; ";
    ! str_append s s2
    // do x <- c1; c2
  end
end

// copy from interpreter.zydeco
# Environments are implemented as association lists.
data Env where
  | +Empty()
  | +Cons(String, SemVal, Env)
end

# The interpreter works with semantic values, which do not include
# variables. We use closures in the interpreter to implement semantic
# thunks.
data SemVal where
  | +True()
  | +False()
  | +ThunkV(Thunk(SemComp))
end

# The "final answer" of the interpreter is either the final value or
# an error.
data Answer (A : VType) where
  | +Ok(A)
  | +Err()
end

# The semantics of computations are Zydeco computations which satisfy
# this codata type. There are two eliminators: application to a
# variable and a bind.
codata SemComp where
  | .app : SemVal -> SemComp
  | .bind : Ret(Answer SemVal)
end

# The interpreters for values and computations are implemented
# mutually recursively.
# Currently zydeco doesn't directly support mutual recursion but
# it can be easily simulated:
codata Interpreter where
  | .valu : SynVal -> Env -> Ret(Answer SemVal)
  | .comp : SynComp -> Env -> SemComp
end

def fn sem_val_to_str (s : SemVal) : F String =
  match s
  | +True() -> ret "true"
  | +False() -> ret "false"
  | +ThunkV(_) -> ret "<thunk>"
  end
end

def rec fn lookup (x : String) (g : Env) : Ret(Answer SemVal) =
  match g
  | +Empty() -> ret +Err()
  | +Cons(y,v,g) ->
    do b <- ! str_eq x y;
    match b
    | +True() -> ret +Ok(v)
    | +False() -> ! lookup x g
    end
  end
end

def rec error: SemComp =
  comatch
    | .app _ -> ! error
    | .bind -> ret +Err()
  end
end

def rec interp: Interpreter =
  comatch
    | .valu v g ->
      match v
      | +Var(x) -> ! lookup x g
      | +True() -> ret +Ok(+True())
      | +False() -> ret +Ok(+False())
      # Here we use the meta-language closures to capture the environment g 
      | +ThunkV(m) -> ret +Ok(+ThunkV({ ! interp .comp m g }))
      end
    | .comp m g ->
      match m
      | +If(cond, mt, mf) ->
        match cond
        | +Var(x) ->
          do v? <- ! lookup x g;
          match v?
          | +Ok(v) -> (
            match v
            | +True() -> ! interp .comp mt g
            | +False() -> ! interp .comp mf g
            | +ThunkV(_) -> ! error
            end)
          | +Err() -> ! error
          end
        | +True() -> ! interp .comp mt g
        | +False() -> ! interp .comp mf g
        | +ThunkV(_) -> ! error
        end
      | +Force(syn_val) ->
        do v? <- ! interp .valu syn_val g;
        match v?
        | +Ok(v) -> (
          match v
          | +ThunkV(t) -> ! t
          | +True() -> ! error
          | +False() -> ! error
          end
        )
        | +Err() -> ! error
        end
      | +Return(syn_val) ->
        do v <- ! interp .valu syn_val g;
        comatch
          | .bind -> ret v
          | .app _ -> ! error
        end
      | +Bind(m, x, k) ->
        do v? <- ! interp .comp m g .bind;
        match v?
        | +Ok(v) -> ! interp .comp k +Cons(x, v, g)
        | +Err() -> ! error
        end
      | +Lam(x, m) ->
        comatch
          | .app v -> (! interp .comp m +Cons(x, v, g))
          | .bind -> ret +Err()
        end
      | +App(m, v) ->
        do v? <- ! interp .valu v g;
        match v?
        | +Ok(v) -> ! interp .comp m g .app v
        | +Err() -> ! error
        end
      end
    end
end
    
main
  // // the difference between many and many' is that many' is lazy
  // let m = {! many' @(Char) {! char 'a'} "aaab"} in
  // // let m = {! many @(Char) {! char 'a'} "aaab"} in
  // ! print_parser_all @(U(LList Char)) list_to_str m {
  // ! exit 0
  // }

  // lambda works
  // let m = {! expr "| x -> (| y -> y)"} in
  // ! print_parser_hd @(Expr) expr_fmt m {
  //   ! exit 0
  // }

  // let works
  // let m = {! expr "let x = (| y -> y) in x"} in
  // ! print_parser_all @(Expr) expr_fmt m {
    // ! exit 0
  // }

  // application doesnt work
  // let m = {! expr "x . y"} in
  // ! print_parser_all @(Expr) expr_fmt m {
  //   ! exit 0
  // }

  // addop works
  // let m = {! eval "1+2"} in
  // ! print_parser_all @(Int) int_to_str m {
  //   ! exit 0
  // }

  // cbpv
  // if, force, ret, lambda work
  // let m = {! synComp "| x -> if x then ret True() else ! m"} in
  // ! print_parser_all @(SynComp) synComp_fmt m {
  //   ! exit 0
  // }

  // bind works
  // let m = {! synComp "do x <- ! m; ret x"} in
  // ! print_parser_all @(SynComp) synComp_fmt m {
  //   ! exit 0
  // }

  // paren works
  // let m = {! synComp "(ret x)"} in
  // ! print_parser_all @(SynComp) synComp_fmt m {
  //   ! exit 0
  // }

  // appop works
  // let m = {! synComp "ap (| x -> if x then ret True() else ret x) to False()"} in
  // ! print_parser_all @(SynComp) synComp_fmt m {
  //   ! exit 0
  // }

  // thunk works
  // let m = {! value "{ x }"} in
  // ! print_parser_all @(SynVal) synVal_fmt m {
  //   ! exit 0
  // }

  // final result
  // let m = {! synComp "if True() then ret False() else ret True()"} in
  // let m = {! synComp "ap (| x -> ret x) to True()"} in
  // interpreter error ;(
  let m = {! synComp "ap (| x -> if x then ret False() else ret True()) to True()"} in
  ! print_parser_all @(SynComp) synComp_fmt m {
  do hd <- ! LList.head @(Pair SynComp String) m;
  match hd
  | +None() -> ! exit 0
  | +Some(p) ->
    match p
    | +Cons(m, _) ->
      do x <- ! interp .comp m +Empty() .bind;
      match x
      | +Err() -> ! panic "ERROR"
      | +Ok(sv) ->
        do s <- ! sem_val_to_str sv;
        do ! write_line "evaluated to:";
        do ! write_line s;
        ! exit 0
      end
    end
  end
  }
end
