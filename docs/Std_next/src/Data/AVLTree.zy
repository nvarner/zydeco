use Builtin/ (VType, CType, Thunk, Ret, F, U) end
use Std/ Bool/ (Bool, Cmp, and) end
use Std/ Option end
use Std/ String/ (String, str_append, int_to_str) end
use Std/ Arith/ (Int, add, int_gt, sub, int_lt) end
use Std/ Prod/ (pair) end
use Std/ OS/ (OS, write_line) end

pub data AVL (A : VType) where
  | +Leaf()
  | +Node(AVL A, A, Int, AVL A)
end

def fn max_int (x : Int) (y : Int) : F(Int) =
  do b <- ! int_gt x y;
  match b
  | +True() -> ret x
  | +False() -> ret y
  end
end

pub def fn leaf (A : VType) : F(AVL A) =
  ret +Leaf()
end

pub def fn singleton (A : VType) (x : A) : F(AVL A) =
  do lf <- ! leaf @(A);
  ret +Node(+Leaf(), x, 1, +Leaf())
end

pub def fn height (A : VType) (tree : AVL A) : F(Int) =
  match tree
  | +Leaf() -> ret 0
  | +Node(l, n, h, r) -> ret h
  end
end

pub def fn fix_height (A : VType) (tree : AVL A) : F(AVL A) =
  match tree
  | +Leaf() -> ret +Leaf()
  | +Node(l, n, h, r) ->
    do hl <- ! height @(A) l;
    do hr <- ! height @(A) r;
    do h' <- ! max_int hl hr;
    do h' <- ! add h' 1;
    ret +Node(l, n, h', r)
  end
end

pub def fn balance_factor (A : VType) (tree : AVL A) : F(Int) =
  match tree
  | +Leaf() -> ret 0
  | +Node(l, n, h, r) ->
    do hl <- ! height @(A) l;
    do hr <- ! height @(A) r;
    ! sub hl hr
  end
end

pub def fn left (A : VType) (tree : AVL A) : F(AVL A) =
  match tree
  | +Leaf() -> ret +Leaf()
  | +Node(l, n, h, r) -> ret l
  end
end

pub def fn right (A : VType) (tree : AVL A) : F(AVL A) =
  match tree
  | +Leaf() -> ret +Leaf()
  | +Node(l, n, h, r) -> ret r
  end
end

pub def rec fn min_element (A : VType) (tree : AVL A) (cmp : Cmp A) : F(Option A) =
  match tree
  | +Leaf() -> ret +None()
  | +Node(l, n, h, r) ->
    do l' <- ! min_element @(A) l cmp;
    match l'
    | +Some(x) -> ret +Some(x)
    | +None() -> ret +Some(n)
    end
  end
end

pub def fn rotate_right (A : VType) (tree : AVL A) : F(AVL A) =
  match tree
  | +Leaf() -> ret +Leaf()
  | +Node(l, n, h, r) ->
    match l
    | +Leaf() -> ret +Leaf()
    | +Node(ll, ln, lh, lr) ->
      do n_tree <- ! fix_height @(A) +Node(lr, n, h, r);
      ! fix_height @(A) +Node(ll, ln, lh, n_tree)
    end
  end
end

pub def fn rotate_left (A : VType) (tree : AVL A) : F(AVL A) =
  match tree
  | +Leaf() -> ret +Leaf()
  | +Node(l, n, h, r) ->
    match r
    | +Leaf() -> ret +Leaf()
    | +Node(rl, rn, rh, rr) ->
      do n_tree <- ! fix_height @(A) +Node(l, n, h, rl);
      ! fix_height @(A) +Node(n_tree, rn, rh, rr)
    end
  end
end

pub def fn balance (A : VType) (tree : AVL A) : F(AVL A) =
  match tree
  | +Leaf() -> ret +Leaf()
  | +Node(l, n, h, r) ->
    do bf <- ! balance_factor @(A) tree;
    do g_1 <- ! int_gt bf 1;
    match g_1
    | +True() ->
      do l_bf <- ! balance_factor @(A) l;
      do l_0 <- ! int_lt l_bf 0;
      match l_0
      | +True() -> 
        do l_tree' <- ! rotate_left @(A) l;
        do n_h <- ! height @(A) tree;
        ! rotate_right @(A) +Node(l_tree', n, n_h, r)
      | +False() ->
        ! rotate_right @(A) tree
      end
    | +False() ->
      do l_m1 <- ! int_lt bf -1;
      match l_m1
      | +True() ->
        do r_bf <- ! balance_factor @(A) r;
        do g_0 <- ! int_gt r_bf 0;
        match g_0
        | +True() -> 
          do r_tree' <- ! rotate_right @(A) r;
          do n_h <- ! height @(A) tree;
          ! rotate_left @(A) +Node(l, n, n_h, r_tree')
        | +False() ->
          ! rotate_left @(A) tree
        end
      | +False() -> ret tree
      end
    end
  end
end

pub def rec fn insert (A : VType) (x : A) (tree : AVL A) (cmp : Cmp A) : F(AVL A) =
  match tree
  | +Leaf() -> ! singleton @(A) x
  | +Node(l, n, h, r) ->
    do b <- ! cmp x n;
    match b
    | +True() ->
      do l' <- ! insert @(A) x l cmp;
      do n_tree <- ! fix_height @(A) +Node(l', n, h, r);
      ! balance @(A) n_tree
    | +False() ->
      do r' <- ! insert @(A) x r cmp;
      do n_tree <- ! fix_height @(A) +Node(l, n, h, r');
      ! balance @(A) n_tree
    end
  end
end

pub def rec fn search (A : VType) (x : A) (tree : AVL A) (cmp_eq : Cmp A) (cmp_lt : Cmp A) : F(Option A) =
  match tree
  | +Leaf() -> ret +None()
  | +Node(l, n, h, r) ->
    do b <- ! cmp_eq x n;
    match b
    | +True() -> ret +Some(n)
    | +False() ->
      do b <- ! cmp_lt x n;
      match b
      | +True() -> ! search @(A) x l cmp_eq cmp_lt
      | +False() -> ! search @(A) x r cmp_eq cmp_lt
      end
    end
  end
end

pub def rec fn change (A : VType) (x : A) (tree : AVL A) (cmp_eq : Cmp A) (cmp_lt : Cmp A) : F(AVL A) =
  match tree
  | +Leaf() -> ret tree
  | +Node(l, n, h, r) ->
    do b <- ! cmp_eq x n;
    match b
    | +True() ->
      ret +Node(l, x, h, r)
    | +False() ->
      do b <- ! cmp_lt x n;
      match b
      | +True() ->
        do l' <- ! change @(A) x l cmp_eq cmp_lt;
        ret +Node(l', n, h, r)
      | +False() ->
        do r' <- ! change @(A) x r cmp_eq cmp_lt;
        ret +Node(l, n, h, r')
      end
    end
  end
end

pub def rec fn delete (A : VType) (x : A) (tree : AVL A) (cmp_eq : Cmp A) (cmp_lt : Cmp A) : F(AVL A) =
  match tree
  | +Leaf() -> ret tree
  | +Node(l, n, h, r) ->
    do b <- ! cmp_eq x n;
    match b
    | +True() ->
      match l
      | +Leaf() -> ret r
      | +Node(ll, ln, lh, lr) ->
        match r
        | +Leaf() -> ret l
        | +Node(rl, rn, rh, rr) ->
          do right_min <- ! min_element @(A) r cmp_lt;
          match right_min
          | +None() -> ret l
          | +Some(m) ->
            do r' <- ! delete @(A) m r cmp_eq cmp_lt;
            do n_tree <- ! fix_height @(A) +Node(l, m, h, r');
            ! balance @(A) n_tree
          end
        end
      end
    | +False() ->
      do bl <- ! cmp_lt x n;
      match bl
      | +True() ->
        do l' <- ! delete @(A) x l cmp_eq cmp_lt;
        do n_tree <- ! fix_height @(A) +Node(l', n, h, r);
        ! balance @(A) n_tree
      | +False() ->
        do r' <- ! delete @(A) x r cmp_eq cmp_lt;
        do n_tree <- ! fix_height @(A) +Node(l, n, h, r');
        ! balance @(A) n_tree
      end
    end
  end
end

pub def rec fn equal (A : VType) (tree1 : AVL A) (tree2 : AVL A) (cmp_eq : Cmp A) : F(Bool) =
  match tree1
  | +Leaf() ->
    match tree2
    | +Leaf() -> ret +True()
    | +Node(_, _, _, _) -> ret +False()
    end
  | +Node(l1, n1, h1, r1) ->
    match tree2
    | +Leaf() -> ret +False()
    | +Node(l2, n2, h2, r2) ->
      do b3 <- ! cmp_eq n1 n2;
      match b3
      | +True() ->
        do b1 <- ! equal @(A) l1 l2 cmp_eq;
        do b2 <- ! equal @(A) r1 r2 cmp_eq;
        ! and b1 b2
      | +False() -> ret +False()
      end
    end
  end
end

pub def rec fn pre_traversal (A : VType) (tree : AVL A) (fmt : U(A -> F(String))) (next : U OS) : OS =
  match tree
  | +Leaf() -> ! next
  | +Node(left, v, h, right) ->
    do r1 <- ! fmt v;
    do r2 <- ! str_append r1 " h:";
    do r3 <- ! int_to_str h;
    do res <- ! str_append r2 r3;
    ! write_line res {
      ! pre_traversal @(A) left fmt {
        ! pre_traversal @(A) right fmt {! next}}}
  end
end