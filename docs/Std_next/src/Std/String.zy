use Arith/ (Int, int_lt, add) end
use Prod/ Pair end
use Std/ (Option, Unit) end
use Bool/ (Bool, if) end
use Builtin/ (Thunk, Ret, F) end
// use Data/ LList/ (LList, singleton_list, cons) end

pub extern data Char end
pub extern data String end

pub extern def str_length : Thunk(String -> Ret Int) end
pub extern def str_append : Thunk(String -> String -> Ret String) end
pub extern def str_split_once : Thunk(String -> Char -> Ret (Option (Pair String String))) end
pub extern def str_split_n : Thunk(String -> Int -> Ret (Option (Pair String String))) end
pub extern def str_eq : Thunk(String -> String -> Ret Bool) end
pub extern def str_index : Thunk(String -> Int -> Ret Char) end

## conversions

pub def unit_to_str : Thunk(Unit -> Ret String) = {
  fn (_u : Unit) -> ret "()"
} end
pub def bool_to_str : Thunk(Bool -> Ret String) = {
  fn (b : Bool) ->
    ! if @(Ret String) b { ret "True" } { ret "False" }
} end

pub extern def int_to_str : Thunk(Int -> Ret String) end
pub extern def char_to_str : Thunk(Char -> Ret String) end
pub extern def char_to_int : Thunk(Char -> Ret Int) end
pub extern def str_to_int : Thunk(String -> Ret Int) end

pub def char_eq: Thunk(Char -> Char -> Ret Bool) = {
  fn (c: Char) (c': Char) ->
    do c <- ! char_to_str c;
    do c' <- ! char_to_str c';
    ! str_eq c c'
} end

pub def rec fn str_slice (str : String) (left : Int) (right : Int) : F String =
  do cond <- ! int_lt left right;
  ! if @(F String) cond {
    do c <- ! str_index str left;
    do c' <- ! char_to_str c;
    do left' <- ! add left 1;
    do s <- ! str_slice str left' right;
    do s <- ! str_append c' s;
    ret s
  } {
    ret ""
  }
end