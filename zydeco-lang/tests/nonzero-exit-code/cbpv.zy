codata Monad (M: VType -> CType) where
  | .return(): forall (A: VType) . A -> M A
  | .bind(): forall (A: VType) (A': VType) . U (M A) -> U (A -> M A') -> M A'
  | .fail(): forall (A: VType) . Exception -> M A
  // | .print(): String -> M Unit
end

data Exception where
  | TypeError()
  | FreeVariable()
end

codata Mo (A: VType) where
  | .run(): forall (R: CType) . U (A -> R) -> U (Exception -> R) -> R
end

def fn mexn : Monad Mo =
  comatch
  | .return() -> fn A a ->
    comatch
    | .run() -> fn R ka _ -> ! ka a
    end
  | .bind() -> fn A A' m f ->
    comatch
    | .run() -> fn R ka ke ->
      ! m .run() @(R) { fn a -> ! f a .run() @(R) ka ke } { fn e -> ! ke e }
    end
  | .fail() -> fn A e ->
    comatch
    | .run() -> fn R _ ke -> ! ke e
    end
  // | .print() -> fn s ->
  //   comatch
  //   | .run() -> fn R ka _ ->
  //     ! write_line s { ! ka Unit() }
  //   end
  end
end

data EnvT where
  | Empty()
  | Extend(String, Value, EnvT)
end

codata EnvO where
  | .lookup(): String -> Ret (Option Value)
  | .extend(): String -> Value -> EnvO
end

def rec fn envo (env: EnvT) : EnvO =
  comatch
  | .lookup() -> fn x ->
    match env
    | Empty() -> ret None()
    | Extend(x', v, env') ->
      do is-eq? <- ! str_eq x x';
      match is-eq?
      | True() -> ret Some(v)
      | False() -> ! envo env' .lookup() x
      end
    end
  | .extend() -> fn x v ->
    ! envo Extend(x, v, env)
  end
end

data Value where
  | Bool(Bool)
  | Thunk(U Compu)
end

codata Compu where
  | .app(): Value -> Compu
  | .bind(): Mo Value
end

def rec fn abort (e: Exception) : Compu =
  comatch
  | .app() -> fn _ -> ! abort e
  | .bind() -> ! mexn .fail() @(Value) e
  end
end

data SValue where
  | Var(String)
  | Bool(Bool)
  | Thunk(SCompu)
end

data SCompu where
  | Lam(String, SCompu)
  | App(SCompu, SValue)
  | Ret(SValue)
  | Bind(SCompu, String, SCompu)
  | Force(SValue)
  | If(SValue, SCompu, SCompu)
end

codata Interp where
  | .value(): SValue -> Mo Value
  | .compu(): SCompu -> Compu
end

def rec fn interp (env: U EnvO) : Interp =
  comatch
  | .value() -> fn sv ->
    match sv
    | Var(x) ->
      do x? <- ! env .lookup() x;
      match x?
      | None() -> ! mexn .fail() @(Value) FreeVariable()
      | Some(v) ->
        ! mexn .return() @(Value) v
      end
    | Bool(b) ->
      ! mexn .return() @(Value) Bool(b)
    | Thunk(c) ->
      ! mexn .return() @(Value) Thunk({ ! interp env .compu() c })
    end
  | .compu() -> fn sc ->
    match sc
    | Lam(x, sc) ->
      comatch
      | .app() -> fn v ->
        ! interp { ! env .extend() x v } .compu() sc
      | .bind() -> ! mexn .fail() @(Value) TypeError()
      end
    | App(sc, sv) ->
      let mv = { ! interp env .value() sv } in
      ! mv .run() @(Compu) { fn v -> ! interp env .compu() sc .app() v } abort
    | Ret(sv) ->
      let rec fn unwind (m: U (Mo Value)) : Compu =
        comatch
        | .app() -> fn _ -> ! unwind { ! mexn .fail() @(Value) TypeError() }
        | .bind() -> ! m
        end
      in
      ! unwind { ! interp env .value() sv }
    | Bind(sc1, x, sc2) ->
      let mv = { ! interp env .compu() sc1 .bind() } in
      ! mv .run() @(Compu) { fn v -> ! interp { ! env .extend() x v } .compu() sc2 } abort
    | Force(sv) ->
      let mv = { ! interp env .value() sv } in
      ! mv .run() @(Compu) { fn v ->
        match v
        | Bool(_) -> ! abort TypeError()
        | Thunk(c) -> ! c
        end
      } abort
    | If(sv, c1, c2) ->
      let mv = { ! interp env .value() sv };
      ! mv .run() @(Compu) { fn v ->
        match v
        | Bool(b) ->
          match b
          | True() -> ! interp env .compu() c1
          | False() -> ! interp env .compu() c2
          end
        | Thunk(_) -> ! abort TypeError()
        end
      } abort
    end
  end
end

main
  let term: SCompu = If(Bool(True()), Ret(Bool(True())), Ret(Bool(False())));
  let env : U EnvO = { ! envo Empty() };
  let fn report (e: Exception) : OS =
    match e
    | TypeError() -> ! panic "type error"
    | FreeVariable() -> ! panic "free variable"
    end
  in
  ! interp env .compu() term .bind() .run() @(OS) {
    fn v -> match v
    | Bool(b) ->
      match b
      | True() -> ! write_line "\\^o^/" { ! exit 0 }
      | False() -> ! panic "wrong value"
      end
    | Thunk(_) -> ! panic "should be bool"
    end
  } report
end
