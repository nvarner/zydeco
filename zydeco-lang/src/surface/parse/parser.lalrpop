use crate::{
    surface::parse::{syntax::*, lexer::*, escape},
    syntax::DeclSymbol,
    utils::span::*,
};

grammar<'input>(input: &'input str);

//* --------------------------------- Module --------------------------------- */

pub Zydeco: Span<TopLevel> = Span<TopLevel>;

TopLevel: TopLevel = {
    <declarations:DeclSymbol<Declaration>*> => {
        TopLevel {
            declarations: declarations,
        }
    },
};

DeclSymbol<T>: DeclSymbol<T> = {
    <public:"pub"?> <external:"extern"?> <inner:T> => DeclSymbol {
        public: public.is_some(),
        external: external.is_some(),
        inner,
    }
};

Declaration: Declaration = {
    "module" <name:NameRef<UpperId>?> "where"
        <declarations:DeclSymbol<Declaration>*>
    "end" => Module {
        name, declarations
    }.into(),
    "use" <UseDef> "end" => <>.into(),
    "data" <name:NameDef<UpperId>> <params:TypePattern*>
        <ctors:("where" <DataBr*>)?>
    "end" => Data {
        name, params, ctors: ctors.unwrap_or_default(),
    }.into(),
    "codata" <name:NameDef<UpperId>> <params:TypePattern*>
        <dtors:("where" <CodataBr*>)?>
    "end" => Codata {
        name, params, dtors: dtors.unwrap_or_default(),
    }.into(),
    "alias" <name:NameDef<UpperId>> <params:TypePattern*> "=" <ty:Box<Span<Type>>> "end" => Alias {
        name, params, ty,
    }.into(),
    "define" <gen:GenLet> DefineEnd => Define(gen).into(),
    "main" <entry:Span<TermComputation>> "end" => Main {
        entry,
    }.into(),
};

UseDef: UseDef = {
    <NameRef<MixedId>> => <>.into(),
    ".." => UseAll.into(),
    <path:NameRef<UpperId>>  <cluster:SepByDelim<"(", ",", UseDef, ")">> => UseCluster {
        path, cluster,
    }.into(),
};

DefineEnd: () = {
    "end" => (),
    ";" => (),
};

DataBr: DataBr<CtorV, Span<Type>> = {
    "|" <ctorv:CtorV> <tys:SepByDelim<"(", ",", <Span<Type>>, ")">> => {
        DataBr { ctorv, tys }
    }
};

CodataBr: CodataBr<DtorV, Span<Type>> = {
    "|" <dtorv:DtorV> <tys:SepByDelim<"(", ",", <Span<Type>>, ")">> ":"
    <ty:Span<Type>> => {
        CodataBr { dtorv, tys, ty }
    }
};

//* --------------------------------- Pattern -------------------------------- */

TypePattern: TypePattern = {
    "(" <name:NameDef<UpperId>> <kind: (":" <Span<Kind>>)?> ")" => (name, kind),
    <NameDef<UpperId>> => (<>, None),
};

TermPattern: TermPattern = {
    "(" <v:NameDef<LowerId>> <ty:(":" <Span<Type>>)?> ")" => (v, ty),
    <NameDef<LowerId>> => (<>, None),
};

Pattern: Pattern = {
    <TypePattern> => <>.into(),
    <TermPattern> => <>.into(),
};

//* ---------------------------------- Kind ---------------------------------- */

Kind: Kind = {
    KindArrow,
};

KindArrow: Kind = {
    <k:Box<Span<KindAtom>>> "->" <kd:Box<Span<KindArrow>>> => {
        Arrow(k, kd).into()
    },
    KindAtom,
};

KindAtom: Kind = {
    "(" <Kind> ")" => <>,
    "VType" => KindBase::VType.into(),
    "CType" => KindBase::CType.into(),
};

//* ---------------------------------- Type ---------------------------------- */

Type: Type = {
    "forall" <param:TypePattern+> "." <ty:Box<Span<TypeArrow>>> => {
        Forall { param, ty }.into()
    },
    "exists" <param:TypePattern+> "." <ty:Box<Span<TypeArrow>>> => {
        Exists { param, ty }.into()
    },
    TypeArrow,
};

TypeArrow: Type = {
    <t:Box<Span<TypeApp>>> "->" <ty:Box<Span<Type>>> => {
        Arrow(t, ty).into()
    },
    TypeApp,
};

TypeApp: Type = {
    <t:Box<Span<TypeApp>>> <ty:Box<Span<TypeAtom>>> => {
        TypeApp(t, ty).into()
    },
    TypeAtom,
};

TypeAtom: Type = {
    "(" <Type> ")" => <>,
    <NameRef<UpperId>> => <>.into(),
    "_?" => Hole.into(),
};

//* ---------------------------------- Term ---------------------------------- */

pub TermSpan: Span<Term> = Span<Term>;

Term: Term = {
    <TermComputation> => <>.into(),
    <TermValue> => <>.into(),
};

TermValue: TermValue = {
    "(" <TermValue> ")" => <>.into(),
    "(" <tv:Box<Span<TermValue>>> ":" <ty:Span<Type>> ")" => Annotation {
        term: tv,
        ty,
    }.into(),
    <NameRef<LowerId>> => <>.into(),
    "{" <tc:Box<Span<TermComputation>>> "}" => Thunk(tc).into(),
    <ctorv:CtorV> <args:SepByDelim<"(", ",", Span<TermValue>, ")">> => Ctor {
        ctorv, args,
    }.into(),
    <Literal> => <>.into(),
    "pack" "(" <ty:Box<Span<Type>>> "," <body:Box<Span<TermValue>>> ")" => Pack {
        ty, body,
    }.into(),
};

TermComputation: TermComputation = {
    TermComputationRight,
    "let" <gen:GenLet> LetSep <body:Box<Span<TermComputation>>> => Let {
        gen, body,
    }.into(),
    "do" <var:TermPattern> "<-"
        <comp:Box<Span<TermComputation>>> ";"
    <body:Box<Span<TermComputation>>> => Do {
        var, comp, body,
    }.into(),
    "rec" <var:TermPattern> "->" <body:Box<Span<TermComputation>>> => Rec {
        var, body,
    }.into(),
    "match" <scrut:Box<Span<TermValue>>> <arms:MatchBr*> "end" => Match {
        scrut, arms,
    }.into(),
    "comatch" <arms:ComatchBr*> "end" => Comatch {
        arms,
    }.into(),
    "fn" <param:Pattern*> "->" <body:Box<Span<TermComputation>>> => Abs {
        param, body,
    }.into(),
    "match" <scrut:Box<Span<TermValue>>> 
    "|"? "pack" "(" <tvar:NameDef<UpperId>> "," <var:NameDef<LowerId>> ")" "->"
        <body:Box<Span<TermComputation>>> 
    "end" => MatchPack {
        scrut, tvar, var, body,
    }.into(),
};

LetSep: () = {
    ";" => (),
    "in" => (),
};

TermComputationRight: TermComputation = {
    TermComputationAtom,
    <body:Box<Span<TermComputationRight>>> <arg:Box<Span<TermValue>>> => App {
        body, arg,
    }.into(),
    <body:Box<Span<TermComputationRight>>> "@" "(" <arg:Box<Span<Type>>> ")" => App {
        body, arg,
    }.into(),
    <body:Box<Span<TermComputationRight>>> <dtorv:DtorV>
    <args:SepByDelim<"(", ",", Span<TermValue>, ")">> => Dtor {
        body, dtorv, args,
    }.into(),
};

TermComputationAtom: TermComputation = {
    "(" <TermComputation> ")" => <>.into(),
    "(" <tc:Box<Span<TermComputation>>> ":" <ty:Span<Type>> ")" => Annotation {
        term: tc, ty,
    }.into(),
    "ret" <Box<Span<TermValue>>> => Ret(<>).into(),
    "!" <Box<Span<TermValue>>> => Force(<>).into(),
};

GenLet: GenLet = {
    <rec:"rec"?> <fun:"fn"?> <var:NameDef<LowerId>> <params:Pattern*>
    <ty:(":" <Span<Type>>)?> <def: ("=" <Box<Span<Term>>>)?> => GenLet {
        rec: rec.is_some(),
        fun: fun.is_some(),
        name: (var, ty),
        params,
        def,
    }
};

MatchBr: Matcher<CtorV, NameDef, Span<TermComputation>> = {
    "|" <ctorv:CtorV> <vars:SepByDelim<"(", ",", NameDef<LowerId>, ")">> "->"
    <body:Span<TermComputation>> => Matcher {
        ctorv, vars, body
    }
};

ComatchBr: Comatcher<DtorV, NameDef, Span<TermComputation>> = {
    "|" <dtorv:DtorV> <vars:SepByDelim<"(", ",", NameDef<LowerId>, ")">> "->"
    <body:Span<TermComputation>> => Comatcher {
        dtorv, vars, body
    }
};

Literal: Literal = {
    <Int> => <>.into(),
    <String> => <>.into(),
    <Char> => <>.into(),
};

//* ------------------------------- Identifiers ------------------------------ */

NameDef<T>: NameDef = {
    Span<(<Span<T>>)> => NameDef {
        ident: <>.inner, info: <>.info,
    },
};

NameRef<T>: NameRef = {
    Span<(<(<Span<UpperId>> ".")*> <Span<T>>)> => NameRef {
        path: <>.inner.0, ident: <>.inner.1, info: <>.info,
    },
};

CtorV: CtorV = <Span<UpperId>> => <>.into();
DtorV: DtorV = "." <Span<LowerId>> => <>.into();

MixedId: String = {
    <UpperId> => <>,
    <LowerId> => <>,
};

UpperId: String = "UpperId" => <>.into();
LowerId: String = "LowerId" => <>.into();

//* -------------------------------- Terminals ------------------------------- */

Int: i64 = <s:"NumLit"> => s.parse().unwrap();
String: String = <s:"StrLit"> => escape::apply_string_escapes(&s[1..s.len()-1]);
Char: char = <s:"CharLit"> => escape::apply_char_escapes(s);

//* -------------------------------- Utilities ------------------------------- */

#[inline]
Span<T>: Span<T> = {
    <l:@L> <inner:T> <r:@R> => SpanInfo::new(l,r).make(inner)
};

#[inline]
Box<T>: Box<T> = {
    <inner:T> => Box::new(inner)
};

#[inline]
SepByDelim<Start, Sep, T, End>: Vec<T> = {
    Start <mut v: (<T> Sep)*> <last: T?> End => {
        match last {
            None => { },
            Some(t) => { v.push(t); }
        };
        v
    }
};

//* --------------------------------- Tokens --------------------------------- */

extern {
    type Location = usize;
    
    enum Tok<'input> {
        "UpperId" => Tok::UpperIdent(<&'input str>),
        "LowerId" => Tok::LowerIdent(<&'input str>),

        "where" => Tok::Where,
        "end" => Tok::End,
        "module" => Tok::Module,
        "use" => Tok::Use,
        "pub" => Tok::Pub,
        "extern" => Tok::Extern,
        "data" => Tok::Data,
        "codata" => Tok::Codata,
        "alias" => Tok::Alias,
        "define" => Tok::Define,
        "main" => Tok::Main,
        "let" => Tok::Let,
        "in" => Tok::In,
        "do" => Tok::Do,
        "ret" => Tok::Ret,
        "fn" => Tok::Fn,
        "rec" => Tok::Rec,
        "match" => Tok::Match,
        "comatch" => Tok::Comatch,
        "forall" => Tok::Forall,
        "exists" => Tok::Exists,
        "@" => Tok::At,
        "pack" => Tok::Pack,

        "NumLit" => Tok::NumLit(<&'input str>),
        "StrLit" => Tok::StrLit(<&'input str>),
        "CharLit" => Tok::CharLit(<&'input str>),

        "VType" => Tok::VType,
        "CType" => Tok::CType,

        "(" => Tok::ParenOpen,
        ")" => Tok::ParenClose,
        "[" => Tok::BracketOpen,
        "]" => Tok::BracketClose,
        "{" => Tok::BraceOpen,
        "}" => Tok::BraceClose,
        "," => Tok::Comma,
        ":" => Tok::Colon,
        "=" => Tok::Equals,
        ";" => Tok::Semicolon,
        "!" => Tok::Force,
        "|" => Tok::Branch,
        "." => Tok::Dot,
        ".." => Tok::DotDot,
        "->" => Tok::Arrow,
        "<-" => Tok::Assign,
        "_?" => Tok::Hole,
    }
}

