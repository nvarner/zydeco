use crate::{
    arena::*,
    syntax::*,
    lexer::*,
    escape,
};

grammar<'input, 'arena>(
    input: &'input str,
    ar: &'arena mut Arena,
);

//* --------------------------------- Tokens --------------------------------- */

extern {
    type Location = usize;
    
    enum Tok<'input> {
        "UpperId" => Tok::UpperIdent(<&'input str>),
        "LowerId" => Tok::LowerIdent(<&'input str>),

        "where" => Tok::Where,
        "end" => Tok::End,
        "module" => Tok::Module,
        "use" => Tok::Use,
        "pub" => Tok::Pub,
        "extern" => Tok::Extern,
        "data" => Tok::Data,
        "codata" => Tok::Codata,
        "alias" => Tok::Alias,
        "define" => Tok::Define,
        "main" => Tok::Main,
        "let" => Tok::Let,
        "in" => Tok::In,
        "do" => Tok::Do,
        "ret" => Tok::Ret,
        "fn" => Tok::Fn,
        "pi" => Tok::Pi,
        "rec" => Tok::Rec,
        "match" => Tok::Match,
        "comatch" => Tok::Comatch,
        "forall" => Tok::Forall,
        "exists" => Tok::Exists,
        "@" => Tok::At,
        "pack" => Tok::Pack,

        "NumLit" => Tok::NumLit(<&'input str>),
        "StrLit" => Tok::StrLit(<&'input str>),
        "CharLit" => Tok::CharLit(<&'input str>),

        "(" => Tok::ParenOpen,
        ")" => Tok::ParenClose,
        "[" => Tok::BracketOpen,
        "]" => Tok::BracketClose,
        "{" => Tok::BraceOpen,
        "}" => Tok::BraceClose,
        "," => Tok::Comma,
        ":" => Tok::Colon,
        "::" => Tok::ColonColon,
        "=" => Tok::Equals,
        ";" => Tok::Semicolon,
        "!" => Tok::Force,
        "/" => Tok::Slash,
        "|" => Tok::Branch,
        "+" => Tok::Plus,
        "." => Tok::Dot,
        ".." => Tok::DotDot,
        "->" => Tok::Arrow,
        "<-" => Tok::Assign,
        "_" => Tok::Hole,
    }
}

//* -------------------------------- Utilities ------------------------------- */

#[inline]
Sp<T>: Sp<T> = {
    <l:@L> <inner:T> <r:@R> => Sp {
        span: Span::new(l as u32, r as u32),
        inner,
    },
};

#[inline]
SepByDelim<Start, Sep, T, End>: Vec<T> = {
    Start <mut v: (<T> Sep)*> <last: T?> End => {
        match last {
            None => { },
            Some(t) => { v.push(t); }
        };
        v
    }
};

//* -------------------------------- Terminals ------------------------------- */

Int: i64 = <s:"NumLit"> => s.parse().unwrap();
String: String = <s:"StrLit"> => escape::apply_string_escapes(&s[1..s.len()-1]);
Char: char = <s:"CharLit"> => escape::apply_char_escapes(s);

//* ------------------------------- Identifiers ------------------------------ */

UpperId: String = "UpperId" => <>.into();
LowerId: String = "LowerId" => <>.into();
MixedId: String = { <UpperId>, <LowerId>, };

CtorName: String = {
    "+" <UpperId> => {
        let mut s = String::from("+"); s += &<>; s
    },
    "pack" => String::from("pack"),
};
DtorName: String = {
    "." <LowerId> => {
        let mut s = String::from("."); s += &<>; s
    },
    "@" => String::from("@"),
};

NameDef<T>: NameDef = {
    <T> => NameDef(<>.into()),
};

NameRef<T>: NameRef = {
    (<(<UpperId> "::")*> <T>) => NameRef (<>.0, <>.1),
};

//* --------------------------------- Pattern -------------------------------- */

#[inline]
PatternId: PatternId = {
    <Sp<Pattern>> => ar.pattern(<>),
}
Pattern: Pattern = {
    "(" <Pattern> ")" => <>.into(),
    <NameDef<MixedId>> => <>.into(),
    "(" <term:PatternId> ":" <ty:TermId> ")" => Annotation {
        term, ty,
    }.into(),
    "_" => Hole.into(),
};

//* ---------------------------------- Term ---------------------------------- */

GenBind: GenBind = {
    <rec:"rec"?> <fun:"fn"?> <binder:PatternId> <params:PatternId*>
    <ty:(":" <TermId>)?> <bindee: ("=" <TermId>)?> => GenBind {
        rec: rec.is_some(),
        fun: fun.is_some(),
        binder,
        params,
        ty,
        bindee,
    }
};

#[inline]
Literal: Literal = {
    <Int> => <>.into(),
    <String> => <>.into(),
    <Char> => <>.into(),
};

#[inline]
TermGen<T>: TermId = {
    <Sp<T>> => ar.term(<>),
}

#[inline]
TermId: TermId = <TermGen<Term>>;
Term: Term = {
    TermRight,
    // abstraction
    "fn" <params:PatternId*> "->"
        <term:TermId> => Abstraction(params, term).into(),
    // pi
    "pi" <params:PatternId*> "->"
        <term:TermId> => Pi(params, term).into(),
    // forall
    "forall" <params:PatternId*> "." <ty:TermRightId> => Forall(
        params, ty
    ).into(),
    // exists
    "exists" <params:PatternId*> "." <ty:TermRightId> => Exists(
        params, ty
    ).into(),
    // recursion
    "rec" <binder:PatternId> "->"
        <term:TermId> => Recursion(binder, term).into(),
    // bind
    "do" <binder:PatternId> "<-" <bindee:TermId> ";"
    <tail:TermId> => Bind {
        binder, bindee, tail
    }.into(),
    // pure bind
    "let" <binding:GenBind> "in" <tail:TermId> => PureBind {
        binding, tail
    }.into(),
};

#[inline]
TermRightId: TermId = <TermGen<TermRight>>;
TermRight: Term = {
    TermAtom,
    // application
    <term:TermRightId> <arg:TermAtomId> => Application(
        term, vec![arg]
    ).into(),
    // arrow
    <ty_in:TermRightId> "->" <ty_out:TermAtomId> => Arrow(
        ty_in, ty_out
    ).into(),
    // constructor
    <ctor_name:NameRef<CtorName>>
    <args:SepByDelim<"(", ",", <TermId>, ")">> => Constructor(
        ctor_name, args
    ).into(),
    // destructor
    <term:TermGen<TermRight>> <dtor_name:NameRef<DtorName>>
    <args:SepByDelim<"(", ",", <TermId>, ")">> => Destructor(
        term, dtor_name, args
    ).into(),
};

#[inline]
TermAtomId: TermId = <TermGen<TermAtom>>;
TermAtom: Term = {
    "(" <Term> ")" => <>.into(),
    "(" <term:TermId> ":" <ty:TermId> ")" => Annotation {
        term, ty,
    }.into(),
    "_" => Hole.into(),
    <NameRef<MixedId>> => <>.into(),
    "{" <TermId> "}" => Thunk(<>).into(),
    "!" <TermAtomId> => Force(<>).into(),
    "ret" <TermAtomId> => Return(<>).into(),
    <Literal> => <>.into(),
};

//* -------------------------------- TopLevel -------------------------------- */

pub Zydeco: TermId = TermId;
